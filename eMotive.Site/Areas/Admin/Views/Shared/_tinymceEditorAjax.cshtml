    <script src="@Url.Content("~/Content/tinymce/tinymce.min.js")"></script> 
    <script type="text/javascript">

    tinymce.init({
        selector: "textarea",
        plugins: [
            "advlist autolink lists link image charmap print preview anchor spellchecker",
            "searchreplace visualblocks code fullscreen",
            "insertdatetime media table contextmenu paste"
        ],
        content_css: ["@Url.Content("~/Content/bootstrap-responsive.min.css")", "@Url.Content("~/Content/bootstrap.min.css")", "@Url.Content("~/Content/jquery-ui.css")"],
        toolbar: "insertfile undo redo | styleselect | fontsizeselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | spellchecker",
            mode: "specific_textareas",
            editor_selector: "tinymce",
          //  encoding: "xml",
            forced_root_block: false,
            force_p_newlines: false,
            remove_linebreaks: false,
            force_br_newlines: true,              //btw, I still get <p> tags if this is false
            remove_trailing_nbsp: false,
            verify_html: false,
            setup: function (editor)
            {
                /*editor.on('LoadContent', function (e) {
                    e.content = htmlEnDeCode.html(e.content);//.replace(/&#39/g, '&apos');
                });*/

                editor.on('SaveContent', function (e)
                {
                    e.content = e.content.replace(/&#39/g, '&apos');
                });
            },file_browser_callback: RoxyFileBrowser,
            spellchecker_rpc_url: siteRoot + "api/Dictionary/Spelling",
            document_base_url: rootURL

        });

        function RoxyFileBrowser(field_name, url, type, win) {
            var roxyFileman = siteRoot + 'fileman/index.html';
            if (roxyFileman.indexOf("?") < 0) {
                roxyFileman += "?type=" + type;
            }
            else {
                roxyFileman += "&type=" + type;
            }
            roxyFileman += '&input=' + field_name + '&value=' + document.getElementById(field_name).value;
            tinyMCE.activeEditor.windowManager.open({
                file: roxyFileman,
                title: 'Roxy Fileman',
                width: 850,
                height: 650,
                resizable: "yes",
                plugins: "media",
                inline: "yes",
                close_previous: "no"
            }, { window: win, input: field_name });
            return false;
        };


        var htmlEnDeCode = (function () {
            var charToEntityRegex,
                entityToCharRegex,
                charToEntity,
                entityToChar;

            function resetCharacterEntities() {
                charToEntity = {};
                entityToChar = {};
                // add the default set
                addCharacterEntities({
                    '&amp;': '&',
                    '&gt;': '>',
                    '&lt;': '<',
                    '&quot;': '"',
                    '&#39;': "'"
                });
            }

            function addCharacterEntities(newEntities) {
                var charKeys = [],
                    entityKeys = [],
                    key, echar;
                for (key in newEntities) {
                    echar = newEntities[key];
                    entityToChar[key] = echar;
                    charToEntity[echar] = key;
                    charKeys.push(echar);
                    entityKeys.push(key);
                }
                charToEntityRegex = new RegExp('(' + charKeys.join('|') + ')', 'g');
                entityToCharRegex = new RegExp('(' + entityKeys.join('|') + '|&#[0-9]{1,5};' + ')', 'g');
            }

            function htmlEncode(value) {
                var htmlEncodeReplaceFn = function (match, capture) {
                    return charToEntity[capture];
                };

                return (!value) ? value : String(value).replace(charToEntityRegex, htmlEncodeReplaceFn);
            }

            function htmlDecode(value) {
                var htmlDecodeReplaceFn = function (match, capture) {
                    return (capture in entityToChar) ? entityToChar[capture] : String.fromCharCode(parseInt(capture.substr(2), 10));
                };

                return (!value) ? value : String(value).replace(entityToCharRegex, htmlDecodeReplaceFn);
            }

            resetCharacterEntities();

            return {
                htmlEncode: htmlEncode,
                htmlDecode: htmlDecode
            };
        })();
    </script>