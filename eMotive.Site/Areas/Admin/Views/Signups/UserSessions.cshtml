@using System.Linq
@using eMotive.Models.Objects
@using Extensions
@using eMotive.SCE.Common.Helpers
@using eMotive.Models.Objects.Signups

@model ThirdPartySignupSessions
@{
    ViewBag.Title = "UserSessions";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
@section Crumbs
{
    <ul class="breadcrumb">
        <li>
            <a href="@Url.Action("Index", "Home", new { area = "Admin" })">Home</a> <span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.Action("Index", "Users", new { area = "Admin" })">Users</a> <span class="divider">/</span>
        </li>
        <li class="active">
            Third Party Signup
        </li>
    </ul>
}
<div class="page-header">
    <h2>Third Party Signup for @Model.User.Forename @Model.User.Surname</h2>
</div>

<script src="http://js.pusher.com/1.12/pusher.min.js" type="text/javascript"></script>
<script type="text/javascript">

    /*
    var pusher = new Pusher('16e704e82102cc97b901');

    /* pusher.connection.bind('error', function (err) {
         if (err.data.code === 4004) {
             log('>>> detected limit error');
         }
     });*/

  //  var channel = pusher.subscribe('SignupSelection');

  //  channel.bind('PlacesChanged', function (data) {
    //    var signup = data.SignUpId;
     //   var totalPlacesAvailable = data.TotalPlaces;
     //   var placesAvailable = data.PlacesAvailable;
        // alert(signupID);
    //    $("#signup_value_" + signup).text(placesAvailable + " Places Available");

        // if (signupID != undefined && signupID != signup) {
    //    $("#signup_class_" + signup).attr("class", SetStatusStyle(totalPlacesAvailable, placesAvailable, false));
    //    $("#signup_button_" + signup).attr("class", SetStatusStyle(totalPlacesAvailable, placesAvailable, true));
        //  }*/
   // });

    /*function SetStatusStyle(totalplaces, remainingPlaces, button) {
        var placesLeft = (100 * remainingPlaces) / totalplaces;

        var warningLevel;
        if (placesLeft <= 10) {
            warningLevel = button ? "btn btn-danger" : "error";
        }
        else if (placesLeft <= 30) {
            warningLevel = button ? "btn btn-warning" : "warning";
        }
        else if (placesLeft <= 60) {
            warningLevel = button ? "btn btn-info" : "info";
        }
        else {
            return button ? 'btn' : "";
        }

        return warningLevel;
    }*/
</script>

@if (Model.Signup == null || !Model.Signup.SignupInformation.HasContent())
{
    <div>No signup's could be found.</div>
}
else
{
    if (Model.Signup.SignedUp)
    {
        @Html.HiddenFor(m => m.Signup.SignupID)
    }


    <ul class="nav nav-tabs" id="GroupLists" style="font-size: 130%;">
        @foreach (var item in Model.Signup.GetSignupsByGroup())
        {

            <li><a href="#@item.Key.Replace(' ', '_')" data-toggle="tab">@item.Key Sessions (@item.Value.Count())</a></li>

        }
    </ul>
    <div class="tab-content">
        @foreach (var item in Model.Signup.GetSignupsByGroup())
        {
            <div class="tab-pane" id="@item.Key.Replace(' ', '_')">
                <table class="table table-striped table-hover">
                    <tbody>
                        @foreach (var signup in item.Value)
                        {
                            <tr id="signup_class_@signup.ID" @Html.SetStatusStyle(signup.TotalSlotsAvailable, 0 /*signup.SlotsAvailable*/, signup.SignedUp)>

                                <td id="badgelocation" style="width: 60px;">
                                    @if (signup.SignedUp)
                                    {
                                        <span class="label label-success">Signed Up</span>
                                        foreach (var type in signup.SignupTypes.Where(n => n == SlotType.Interested))
                                        {
                                            <span class="label label-success">@type</span>
                                        }
                                    }
                                    else
                                    {
                                        @Html.Raw("&nbsp")

                                    }
                                </td>

                                <td>@signup.Date.ToString("dddd d MMMM yyyy")</td>
                                <td>@signup.Description</td>

                                <td id="signup_value_@signup.ID">@signup.SlotsAvailableString()</td>
                                <td>
                                    <form action="@Url.Action("UserSlots", "Signups", new { area = "Admin", username = Model.User.Username, id = signup.ID})">
                                        <button id="signup_button_@signup.ID" @Html.SetStatusButton(signup.TotalSlotsAvailable, 0 /*signup.SlotsAvailable*/, signup.SignedUp) type="submit">View</button>
                                    </form>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}

@section Scripts
{
    <script type="text/javascript">
        var hash = document.location.hash;
        var prefix = "tab_";
        if (hash) {
            $('#GroupLists a[href=' + hash.replace(prefix, "") + ']').tab('show');
        } else {
            $('#GroupLists a:first').tab('show');
        }

        // Change hash for page-reload
        $('#GroupLists a').on('shown', function(e) {
            window.location.hash = e.target.hash.replace("#", "#" + prefix);
        });
    </script>
}