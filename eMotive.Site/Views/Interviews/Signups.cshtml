@using System.Linq
@using System.Security.Cryptography
@using eMotive.Models.Objects
@using Extensions
@using eMotive.SCE.Common.Helpers
@using eMotive.Models.Objects.Signups
@using Microsoft.Ajax.Utilities

@model UserSignupView
@{
    ViewBag.Title = "Signups";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!--
    <script src="http://js.pusher.com/1.12/pusher.min.js" type="text/javascript"></script> -->
<script src="~/Scripts/jquery-1.9.1.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.signalR-2.1.1.min.js" type="text/javascript"></script>
<script src="~/signalr/hubs" type="text/javascript"></script>

<script type="text/javascript">


   // var pusher = new Pusher('16e704e82102cc97b901');
    /*
    var mmiHub = $.connection.MMIHub;


    $.connection.hub.start().done(function () {
        mmiHub.server.joinGroup("SignupSelection");
    });


    mmiHub.client.placesChanged = function (data) {
        var signup = data.SignUpId;
        var totalPlacesAvailable = data.TotalPlaces;
        var placesAvailable = data.PlacesAvailable;
        // alert(signupID);
        $("#signup_value_" + signup).text(placesAvailable + " Places Available");

        // if (signupID != undefined && signupID != signup) {
        $("#signup_class_" + signup).attr("class", SetStatusStyle(totalPlacesAvailable, placesAvailable, false));
        $("#signup_button_" + signup).attr("class", SetStatusStyle(totalPlacesAvailable, placesAvailable, true));
    };


    function SetStatusStyle(totalplaces, remainingPlaces, button) {
        var placesLeft = (100 * remainingPlaces) / totalplaces;

        var warningLevel;
        if (placesLeft <= 10) {
            warningLevel = button ? "btn btn-danger" : "error";
        }
        else if (placesLeft <= 30) {
            warningLevel = button ? "btn btn-warning" : "warning";
        }
        else if (placesLeft <= 60) {
            warningLevel = button ? "btn btn-info" : "info";
        }
        else {
            return button ? 'btn' : "";
        }

        return warningLevel;
    }*/
</script>
@Html.Raw(Server.HtmlDecode((Model.HeaderText)))


@if (!Model.SignupInformation.HasContent())
{
    <div>No signup's could be found.</div>
}
else
{
    if (Model.SignedUp)
    {
        @Html.HiddenFor(m => m.SignupID)
    }


    <ul class="nav nav-tabs" id="GroupLists" style="font-size: 130%;">
        @foreach (var item in Model.GetSignupsByGroup())
        {

            <li><a href="#@item.Key.Replace(' ', '_')" data-toggle="tab">@item.Key Sessions (@item.Value.Count())</a></li>

        }
    </ul>
    <div class="tab-content">
        @foreach (var item in Model.GetSignupsByGroup())
        {


            <div class="tab-pane" id="@item.Key.Replace(' ', '_')">
                @if (Model.GroupDictionary[item.Key].AllowSelfSignup)
                {
                    var description = Model.GroupDictionary[item.Key].Description;
                    if (!string.IsNullOrEmpty(description))
                     {
                         <div class="alert-info alert">
                             @Html.Raw(Server.HtmlDecode(description))
                         </div>
                     }
                    <table class="table table-striped table-hover">
                        <tbody>
                            @foreach (var signup in item.Value)
                            {
                                <tr id="signup_class_@signup.ID" @Html.SetStatusStyle(signup.TotalSlotsAvailable, 0 /*signup.SlotsAvailable*/, signup.SignedUp)>

                                    <td id="badgelocation" style="width: 60px;">
                                        @if (signup.SignedUp)
                                        {
                                            <span class="label label-success">Signed Up</span>
                                         /*   foreach (var type in signup.SignupTypes.Where(n => n == SlotType.Interested))
                                            {
                                                <span class="label label-success">@type</span>
                                            }*/
                                        }
                                        else
                                        {
                                            @Html.Raw("&nbsp")

                                        }
                                    </td>
                                    <td>@signup.Date.ToString("dddd d MMMM yyyy")</td>

                                    <td>@signup.Description</td>
                                    <td id="signup_value_@signup.ID">@signup.SlotsAvailableString()</td>
                                    <td>

                                        <form action="@Url.Action("Slots", "Interviews", new {area = "", id = signup.ID})">
                                            <button id="signup_button_@signup.ID" @Html.SetStatusButton(signup.TotalSlotsAvailable, 0 /*signup.SlotsAvailable*/, signup.SignedUp) type="submit">View</button>
                                        </form>
                                    </td><td>
                                    @if (signup.SignedUp)
                                    {
                                        <input type="checkbox" onchange="javascript:WillingToChange('@Model.LoggedInUser.ID','@signup.ID'); return false;" @if(Model.WillingToChangeCheck(signup.ID)) {<text>checked="checked"</text>} />
                                    } </td></tr>

                            }
                        </tbody>
                    </table>
                }
                else
                {
                    var msg = Model.GroupDictionary[item.Key].SelfSignupDeniedMessage;
                    <div class="alert-info alert">
                        @if (!string.IsNullOrEmpty(msg))
                        {
                            @Html.Raw(Server.HtmlDecode(msg));
                            
                        }
                        else
                        {
                            <p>Your coordinator will sign you up to a session, you will be notified by email.</p>
                        }
                    </div>
                }
            </div>
        }
    </div>
    @Html.Raw(Server.HtmlDecode(Model.FooterText))
}

@section footer
{
    <script type="text/javascript">
        var hash = document.location.hash;
        var prefix = "tab_";
        if (hash) {
            $('#GroupLists a[href=' + hash.replace(prefix, "") + ']').tab('show');
        } else {
            $('#GroupLists a:first').tab('show');
        }

        // Change hash for page-reload
        $('#GroupLists  a').on('shown', function (e) {
            window.location.hash = e.target.hash.replace("#", "#" + prefix);
        });

        function WillingToChange(userId, signupId) {
            var willingToChange = new Object();
            willingToChange.UserID = userId;
            willingToChange.SignupID = signupId;

            $.ajax({
                type: "Post",
                dataType: "json",
                data: willingToChange,
                url: siteRoot + "api/Sessions/Signup/WillingToChange",
                success: function (data) {
                    if (data.Success) {
                        //  window.location.reload(false);
                        return true;

                    } else {
                        Ajax.DisplayError(data.message, "Error");
                    }
                },
                error: function (request, status, error) {
                    Ajax.DisplayError(data.message, "Error");
                }
            });
        }
    </script>
}
