@using Extensions
@using eMotive.SCE.Common.Helpers
@using eMotive.Models.Objects.Signups

@model UserSignupView
@{
    ViewBag.Title = "Signups";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="http://js.pusher.com/1.12/pusher.min.js" type="text/javascript"></script>
<script type="text/javascript">


    var pusher = new Pusher('16e704e82102cc97b901');

    /* pusher.connection.bind('error', function (err) {
         if (err.data.code === 4004) {
             log('>>> detected limit error');
         }
     });*/

    var channel = pusher.subscribe('SignupSelection');

    channel.bind('PlacesChanged', function (data) {
        var signup = data.SignUpId;
        var totalPlacesAvailable = data.TotalPlaces;
        var placesAvailable = data.PlacesAvailable;
        // alert(signupID);
        $("#signup_value_" + signup).text(placesAvailable + " Places Available");

        // if (signupID != undefined && signupID != signup) {
        $("#signup_class_" + signup).attr("class", SetStatusStyle(totalPlacesAvailable, placesAvailable, false));
        $("#signup_button_" + signup).attr("class", SetStatusStyle(totalPlacesAvailable, placesAvailable, true));
        //  }
    });
    
    function SetStatusStyle(totalplaces, remainingPlaces, button)
    {
        var placesLeft = (100 * remainingPlaces) / totalplaces;

        var warningLevel;
        if (placesLeft <= 10) {
            warningLevel = button ? "btn btn-danger" : "error";
        }
        else if (placesLeft <= 30) {
            warningLevel = button ? "btn btn-warning" : "warning";
        }
        else if (placesLeft <= 60) {
            warningLevel = button ? "btn btn-info" : "info";
        }
        else {
            return button ? 'btn' : "";
        }

        return warningLevel;
    }
</script>

@Html.Raw(Server.HtmlDecode((Model.HeaderText)))

@if (!Model.SignupInformation.HasContent())
{
    <div>No signup's could be found.</div>
}
else
{
    if (Model.SignedUp)
    {
        @Html.HiddenFor(m => m.SignupID)
    }
    
    <table class="table table-striped table-hover">
        <tbody>
            @foreach (var signup in Model.SignupInformation.Where(n => n.DisabilitySignup == true))
            {
                <tr id="signup_class_@signup.ID" @Html.SetStatusStyle(signup.TotalSlotsAvailable, signup.SlotsAvailable, signup.SignedUp) >
                
                    <td id="badgelocation"  style="width: 60px;">
                        @if (signup.SignedUp)
                        {
                            <span class="label label-success">Signed Up</span>
                        }
                        else
                        {
                            @Html.Raw("&nbsp");
                        }
                    </td>
                    <td>@signup.Date.ToString("dddd d MMMM yyyy")</td>
                
                    <td id="signup_value_@signup.ID" >@signup.SlotsAvailableString()</td>
                    <td>
                        <form action="@Url.Action("Slots", "Interviews", new { area = "", id = signup.ID })">
                            <button id="signup_button_@signup.ID" @Html.SetStatusButton(signup.TotalSlotsAvailable, signup.SlotsAvailable, signup.SignedUp) type="submit">View</button>
                        </form>
                    </td>
                </tr>
            
            }
        </tbody>
    </table>
    
   
} @Html.Raw(Server.HtmlDecode((Model.FooterText)))