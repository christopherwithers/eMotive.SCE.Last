@using eMotive.SCE.Common.Helpers
@using eMotive.Models.Objects
@using eMotive.Models.Objects.Signups
@using Extensions
@model UserSlotView
@{
    ViewBag.Title = "Slots";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.Raw(Server.HtmlDecode((Model.HeaderText)))
<br/>
@if (Model.Group.AllowSelfSignup)
{
    <table class="table table-striped table-hover">
        <tbody>
            @foreach (var slot in Model.SlotState)
            {
                <tr id="slot_class_@slot.ID" @Html.SetStatusStyle(slot.TotalPlacesAvailable, slot.PlacesAvailable(), slot.IsSignedUpToSlot())>
                    <td id="badgelocation" style="width: 60px;">
                        @if (slot.IsSignedUpToSlot())
                        {
                            <span class="label label-success">Signed Up</span>
                            if (slot.SignupType == SlotType.Interested)
                            {
                                <span class="label label-success">@slot.SignupType</span>
                            }
                        }
                        else
                        {
                            @Html.Raw("&nbsp;")

                        }
                    </td>
                    <td>@slot.Description</td>
                    <td id="slot_value_@slot.ID">@slot.PlacesAvailableString()</td>
                    <td>
                        <!--Html.SetSlotStatusButton(slot.TotalPlacesAvailable, slot.PlacesAvailable, slot.Status == SlotStatus.AlreadySignedUp)-->
                        <button @Html.SetSlotStatusButton(slot.TotalPlacesAvailable, slot.PlacesAvailable(), slot.IsSignedUpToSlot()) @Html.AssignStatusFunctionality(slot.Status, Model.ID, slot.ID, Model.LoggedInUser)>@Html.GetSignupStatusName(slot.Status)</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    var msg = Model.Group.SelfSignupDeniedMessage;
    
    <div class="alert-info alert">
        @if (!string.IsNullOrEmpty(msg))
        {
            @Html.Raw(Server.HtmlDecode(msg));
        }
        else
        {
            <p>Your coordinator will sign you up to a session, you will be notified by email.</p>
        }
    </div>
}

@Html.ActionLink("Back To Session Dates", "SignUps", null, new {@class = "btn btn-info btn-small"})


@if (Model.HasSignedUp)
{
    <div id="ClashModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="myModalLabel">You have already signed up for a session</h3>
        </div>
        <div class="modal-body">

            <p>Your interview is scheduled for <strong>Model.SignedUpSlotInformation.Date.ToString("dddd d MMMM yyyy")</strong> at <strong>Model.SignedUpSlotInformation.Description</strong>.</p>
            <br />
            <!--if (Model.SignupID != Model.SignedUpSlotInformation.SignupID)
            {
                <div style="text-align: center; margin-top: 10px;">Html.ActionLink("Show Me My Interview", "Slots", new { id = Model.SignedUpSlotInformation.SignupID }, new { class = "btn btn-info btn-small" })</div>
            }-->
        </div>
        <div class="modal-footer">
            <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        </div>
    </div>
}

@Html.Raw(Server.HtmlDecode((Model.FooterText)))

@section footer
{
    <script src="http://js.pusher.com/1.12/pusher.min.js" type="text/javascript"></script>
    <script>

    /*    var pusher = new Pusher('16e704e82102cc97b901');

        var channel = pusher.subscribe('SignupSelection');

        channel.bind('SlotChanged', function (data)
        {
            var slot = data.SlotId;
            var totalPlacesAvailable = data.TotalPlaces;
            var placesAvailable = data.PlacesAvailable;
            // alert(signupID);
            $("#slot_value_" + slot).text(placesAvailable + " places left");

            // if (signupID != undefined && signupID != signup) {
            $("#slot_class_" + slot).attr("class", SetStatusStyle(totalPlacesAvailable, placesAvailable, false));
            $("#slot_button_" + slot).attr("class", SetStatusStyle(totalPlacesAvailable, placesAvailable, true));
            //  }
        });*/

        function SetStatusStyle(totalplaces, remainingPlaces, button)
        {
            var placesLeft = (100 * remainingPlaces) / totalplaces;

            var warningLevel;
            if (placesLeft <= 10) {
                warningLevel = button ? "btn btn-danger" : "error";
            }
            else if (placesLeft <= 30) {
                warningLevel = button ? "btn btn-warning" : "warning";
            }
            else if (placesLeft <= 60) {
                warningLevel = button ? "btn btn-info" : "info";
            }
            else {
                return button ? 'btn' : "";
            }

            return warningLevel;
        }

        function ShowClashModal()
        {
            $('#ClashModal').modal({
                show: true
            });

            return false;
        }

        function DoSignup(signupId, slotId, username)
        {

            var SlotSignup = new Object();
            SlotSignup.idSignup = signupId;
            SlotSignup.idSlot = slotId;
            SlotSignup.Username = username;

          /*  Ajax.DoQuery(window.Routes.URL("SignupToSlot"), function (data)
            {
                if (data.success) {
                    window.location.reload(false);

                } else {
                    Ajax.DisplayError(data.message, "Error");
                }
            }, params);*/


            $.ajax({
                type: "POST",
                dataType: "json",
                data: SlotSignup,
                url: siteRoot + "api/Sessions/Signup/Add",
                success: function (data) {
                    //alert(data.success);
                    if (data.Success) {
                        window.location.reload(false);

                    } else {
                        Ajax.DisplayError(data.message, "Error");
                    }
                },
                error: function (request, status, error) {
                    Ajax.DisplayError(data.message, "Error");
                }
            });


        }

        function DoCancelSignup(signupId, slotId, username)
        {

          /*  var params = new Object();
            params.idSignup = signupId;
            params.idSlot = slotId;

            Ajax.DoQuery(window.Routes.URL("CancelSignup"), function (data)
            {
                if (data.success) {
                    window.location.reload(false);

                } else {

                }
            }, params);

            return false;*/


            var SlotCancel = new Object();
            SlotCancel.idSignup = signupId;
            SlotCancel.idSlot = slotId;
            SlotCancel.Username = username;

            /*  Ajax.DoQuery(window.Routes.URL("SignupToSlot"), function (data)
              {
                  if (data.success) {
                      window.location.reload(false);
  
                  } else {
                      Ajax.DisplayError(data.message, "Error");
                  }
              }, params);*/


            $.ajax({
                type: "Post",
                dataType: "json",
                data: SlotCancel,
                url: siteRoot + "api/Sessions/Signup/Remove",
                success: function (data) {
                    if (data.Success) {
                        window.location.reload(false);

                    } else {
                        Ajax.DisplayError(data.message, "Error");
                    }
                },
                error: function (request, status, error) {
                    Ajax.DisplayError(data.message, "Error");
                }
            });

        }
    </script>
}
